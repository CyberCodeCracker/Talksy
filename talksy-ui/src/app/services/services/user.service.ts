/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { firstValueFrom } from 'rxjs';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deactivate } from '../fn/user/deactivate';
import { Deactivate$Params } from '../fn/user/deactivate';
import { delete$ } from '../fn/user/delete';
import { Delete$Params } from '../fn/user/delete';
import { getUsers } from '../fn/user/get-users';
import { GetUsers$Params } from '../fn/user/get-users';
import { reactivate } from '../fn/user/reactivate';
import { Reactivate$Params } from '../fn/user/reactivate';
import { udpateProfileInfo } from '../fn/user/udpate-profile-info';
import { UdpateProfileInfo$Params } from '../fn/user/udpate-profile-info';
import { updatedPassword } from '../fn/user/updated-password';
import { UpdatedPassword$Params } from '../fn/user/updated-password';
import { UserResponse } from '../models/user-response';


/**
 * User API
 */
@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `udpateProfileInfo()` */
  static readonly UdpateProfileInfoPath = '/api/v1/users/me/update-profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `udpateProfileInfo()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  udpateProfileInfo$Response(params: UdpateProfileInfo$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = udpateProfileInfo(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `udpateProfileInfo$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  udpateProfileInfo(params: UdpateProfileInfo$Params, context?: HttpContext): Promise<void> {
    const resp = this.udpateProfileInfo$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

  /** Path part for operation `updatedPassword()` */
  static readonly UpdatedPasswordPath = '/api/v1/users/me/update-password';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatedPassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatedPassword$Response(params: UpdatedPassword$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = updatedPassword(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatedPassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatedPassword(params: UpdatedPassword$Params, context?: HttpContext): Promise<void> {
    const resp = this.updatedPassword$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

  /** Path part for operation `reactivate()` */
  static readonly ReactivatePath = '/api/v1/users/me/reactivate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `reactivate()` instead.
   *
   * This method doesn't expect any request body.
   */
  reactivate$Response(params?: Reactivate$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = reactivate(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `reactivate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  reactivate(params?: Reactivate$Params, context?: HttpContext): Promise<void> {
    const resp = this.reactivate$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

  /** Path part for operation `deactivate()` */
  static readonly DeactivatePath = '/api/v1/users/me/deactivate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deactivate()` instead.
   *
   * This method doesn't expect any request body.
   */
  deactivate$Response(params?: Deactivate$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = deactivate(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deactivate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deactivate(params?: Deactivate$Params, context?: HttpContext): Promise<void> {
    const resp = this.deactivate$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

  /** Path part for operation `getUsers()` */
  static readonly GetUsersPath = '/api/v1/users/get-users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers$Response(params?: GetUsers$Params, context?: HttpContext): Promise<StrictHttpResponse<Array<UserResponse>>> {
    const obs = getUsers(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsers(params?: GetUsers$Params, context?: HttpContext): Promise<Array<UserResponse>> {
    const resp = this.getUsers$Response(params, context);
    return resp.then((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body);
  }

  /** Path part for operation `delete()` */
  static readonly DeletePath = '/api/v1/users/me/delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `delete()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete$Response(params?: Delete$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = delete$(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `delete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  delete(params?: Delete$Params, context?: HttpContext): Promise<void> {
    const resp = this.delete$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

}
