/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { firstValueFrom } from 'rxjs';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { editMessage } from '../fn/message/edit-message';
import { EditMessage$Params } from '../fn/message/edit-message';
import { getMessages } from '../fn/message/get-messages';
import { GetMessages$Params } from '../fn/message/get-messages';
import { MessageResponse } from '../models/message-response';
import { saveMessage } from '../fn/message/save-message';
import { SaveMessage$Params } from '../fn/message/save-message';
import { setMessagesToSeen } from '../fn/message/set-messages-to-seen';
import { SetMessagesToSeen$Params } from '../fn/message/set-messages-to-seen';
import { uploadMedia } from '../fn/message/upload-media';
import { UploadMedia$Params } from '../fn/message/upload-media';


/**
 * Message API
 */
@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `uploadMedia()` */
  static readonly UploadMediaPath = '/api/v1/messages/upload-media';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadMedia()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMedia$Response(params: UploadMedia$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = uploadMedia(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadMedia$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMedia(params: UploadMedia$Params, context?: HttpContext): Promise<void> {
    const resp = this.uploadMedia$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

  /** Path part for operation `saveMessage()` */
  static readonly SaveMessagePath = '/api/v1/messages/save-message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveMessage$Response(params: SaveMessage$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = saveMessage(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveMessage(params: SaveMessage$Params, context?: HttpContext): Promise<void> {
    const resp = this.saveMessage$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

  /** Path part for operation `setMessagesToSeen()` */
  static readonly SetMessagesToSeenPath = '/api/v1/messages';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setMessagesToSeen()` instead.
   *
   * This method doesn't expect any request body.
   */
  setMessagesToSeen$Response(params: SetMessagesToSeen$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = setMessagesToSeen(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setMessagesToSeen$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setMessagesToSeen(params: SetMessagesToSeen$Params, context?: HttpContext): Promise<void> {
    const resp = this.setMessagesToSeen$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

  /** Path part for operation `editMessage()` */
  static readonly EditMessagePath = '/api/v1/messages/{chat-id}/{message-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editMessage$Response(params: EditMessage$Params, context?: HttpContext): Promise<StrictHttpResponse<void>> {
    const obs = editMessage(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editMessage(params: EditMessage$Params, context?: HttpContext): Promise<void> {
    const resp = this.editMessage$Response(params, context);
    return resp.then((r: StrictHttpResponse<void>): void => r.body);
  }

  /** Path part for operation `getMessages()` */
  static readonly GetMessagesPath = '/api/v1/messages/chat/{chat-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessages$Response(params: GetMessages$Params, context?: HttpContext): Promise<StrictHttpResponse<Array<MessageResponse>>> {
    const obs = getMessages(this.http, this.rootUrl, params, context);
    return firstValueFrom(obs);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessages(params: GetMessages$Params, context?: HttpContext): Promise<Array<MessageResponse>> {
    const resp = this.getMessages$Response(params, context);
    return resp.then((r: StrictHttpResponse<Array<MessageResponse>>): Array<MessageResponse> => r.body);
  }

}
